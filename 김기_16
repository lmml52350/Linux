프로그램 관리
    소스 파일 다운로드 -> compile -> 환경 설정 및 파일 배치 -> 프로그램 실행	  : tar + 압축
    패키지 파일 보유 -> 패키지 설치 -> 프로그램 실행	                       : rpm
    (internet 연결) -> 명령어 사용 -> 프로그램 실행	                       : yum

압축
 - 파일의 용량을 줄이기 위해 사용

 - 원본 파일 자체가 압축(복사본 생성 후 압축하는 작업 X)

 - 여러 파일을 동시에 압축하면 각각의 파일이 개별 압축

 - 디렉토리 압축 X

 - 형식
        압축 형식        압축        압축 해제

        .zip            zip         unzip

        .gz             gzip        gunzip (gzip -d)

        .bz2            bzip2       bunzip2 (bzip2 -d)

tar
 - Tape archive; 초창기에는 여러 파일을 하나의 파일로 묶어서 백업하는 용도로 사용

 - 여러 파일을 하나의 tar 파일로 묶어주기 때문에 압축 가능

 - 파일을 담을 공간의 크기가 정해져있고, 알맞는 크기의 tar파일을 생성하여 파일들을 저장한다
    > tar파일의 크기는 내부에 저장된 파일들의 크기의 합 보다 크다

 - 형식
        생성	        : tar cvf 생성이름.tar 대상 [대상] ... [대상]

        내부 확인	  : tar tvf 파일명

        해체	        : tar xvf 파일명

rpm
 - redhat package manager; 패키지를 이용한 프로그램/서비스 관리

  * 패키지 : 프로그램을 나눠놓은 조각

 - Linux는 kernel부터 시작하여 모든 구성이 패키지로 이루어져 있고,
   패키지는 다른 패키지와 의존 관계에 놓여있는 경우가 많다
    > 패키지 설치/삭제 과정에서 의존성 관련 오류가 굉장히 많이 나온다

 - rpm은 redhat에서 처음 만들어서 도입했고, redhat 기반의 모든 Linux에서는 rpm 명령어 사용
    > debian 기반의 Linux에서는 rpm이 아닌 dpkg 명령어 사용

 - 형식
        설치    : rpm -ivh 패키지명-버전.아키텍처.rpm

        확인    : rpm -qa | grep 패키지명

        삭제    : rpm -e 패키지명[-버전.아키텍처]

 - 패키지 이름 구조
        vim-filesystem-7.4.629-7.el7.x86_64
        <------------>|<----------->|<---->
           패키지명         버전      아키텍처

  1. 패키지명
        패키지의 이름은 한 단어이거나 - 기호를 이용하여 여러 단어의 조합으로 구성되어 있다
        (이때 숫자만 단독으로 나오는 경우가 없기 때문에 버전과 구별이 가능)

        한 단어이면 해당 패키지로 설치되는 프로그램 or 서비스의 이름을 나타낸다

        여러 단어라면 첫 단어가 설치되는 프로그램 or 서비스의 이름이고
        뒤에 이어지는 단어들이 세부 역할을 의미

  2. 버전
        여러가지 세부 버전으로 구성

        7        : major
        4        : minor
        629      : patch
        7        : release
        el7      : OS

    * OS 버전 표현 방식
        el7	     : CentOS 7버전 전체
        el7_9	  : CentOS 7.9버전
        centos	  : CentOS 모든 버전
        <생략>	  : 모든 운영체제

  3. 아키텍처
        i386, i586, i686	 : 32bit CPU
        x86_64	             : 64bit CPU
        noarch	             : 32bit CPU와 64bit CPU 혼용

 - 의존성 오류
  1. 확인 방법
        A is needed by B    : B에게 A가 필요하다

   1) 설치할 때
        B를 설치하기 위해 A를 먼저 설치 해야 한다

   2) 삭제할 때
        B에게 A가 필요하기 때문에 A를 지울 수 없다

  2. 해결 방법
   1) 의존성 오류 메세지를 읽고 해당 내용 해결
        설치할 때는 A를 먼저 설치하고 B를 설치
        삭제할 때는 B를 먼저 삭제하고 A를 설치

   2) 의존성 오류를 무시하는 보조 옵션 --nodeps 사용
        설치할 때는 A를 찾을 수 없을 때, 삭제할 때는 B를 삭제할 수 없을 때 의존성 오류를 무시한다

  3. 의존성 오류 메세지에 패키지명이 아닌 다른 내용이 출력되면?
   1) 파일의 절대 경로
        패키지에 해당 파일이 포함되어 있는 경우(일반적으로 삭제할 때 출력)
        파일명을 패키지 이름으로 바꿔서 읽으면 된다
        
   2) lib~~~.so.숫자(~~~)
        ~~~ 부분이 패키지를 의미(설치/삭제할 때 전부 출력)
        해당 의존성 오류를 검색하여 패키지명 확인

   3) pkgconfig(~~~)
        ~~~ 부분이 패키지를 의미(일반적으로 설치할 때 출력)
        해당 의존성 오류를 검색하여 패키지명 확인

 - 패키지 파일 구하는 방법
  1. 설치 CD에 있는 패키지 파일 사용

  2. 인터넷에서 패키지 파일을 다운로드 받아 사용
